using Newtonsoft.Json;

using System;
using System.Collections.Generic;
using System.Text;
using KuCoin.NET.Helpers;
using KuCoin.NET.Json;

namespace KuCoin.NET.Data.Order
{
    /// <summary>
    /// Order filled data
    /// </summary>
    public class Fill : OrderBase
    {

        /// <summary>
        /// trade id, it is generated by Matching engine. 
        /// </summary>
        [JsonProperty("tradeId")]
        public string TradeId { get; set; }


        /// <summary>
        /// Order ID, unique identifier of an order. 
        /// </summary>
        [JsonProperty("orderId")]
        public string OrderId { get; set; }


        /// <summary>
        /// counter order id. 
        /// </summary>
        [JsonProperty("counterOrderId")]
        public string CounterOrderId { get; set; }


        /// <summary>
        /// order price 
        /// </summary>
        [JsonProperty("price")]
        public decimal? Price { get; set; }


        /// <summary>
        /// order quantity 
        /// </summary>
        [JsonProperty("size")]
        public decimal? Size { get; set; }


        /// <summary>
        /// order funds 
        /// </summary>
        [JsonProperty("funds")]
        public decimal? Funds { get; set; }


        /// <summary>
        /// fee 
        /// </summary>
        [JsonProperty("fee")]
        public decimal? Fee { get; set; }


        /// <summary>
        /// charge fee currency 
        /// </summary>
        [JsonProperty("feeCurrency")]
        public decimal? FeeCurrency { get; set; }


        /// <summary>
        /// stop type, include entry and loss 
        /// </summary>
        [JsonProperty("stop")]
        public StopType Stop { get; set; }


        /// <summary>
        /// include taker and maker 
        /// </summary>
        [JsonProperty("liquidity")]
        public LiquidityType? Liquidity { get; set; }


        /// <summary>
        /// forced to become taker, include true and false 
        /// </summary>
        [JsonProperty("forceTaker")]
        public bool? ForceTaker { get; set; }


        /// <summary>
        /// create time 
        /// </summary>
        [JsonProperty("createdAt")]
        public long? CreatedAt { get; set; }


        public DateTime Timestamp
        {
            get => EpochTime.MillisecondsToDate((long)CreatedAt);
        }

    }
}
